GET        /trader/:ern/movement/:arc/event/:eventId/movement-created                        controllers.events.ViewEventController.movementCreated(ern: String, arc: String, eventId: Int)
GET        /trader/:ern/movement/:arc/event/:eventId/movement-updated                        controllers.events.ViewEventController.movementUpdated(ern: String, arc: String, eventId: Int)
GET        /trader/:ern/movement/:arc/event/:eventId/change-destination-due                  controllers.events.ViewEventController.changeDestinationDue(ern: String, arc: String, eventId: Int)
GET        /trader/:ern/movement/:arc/event/:eventId/report-receipt-due                      controllers.events.ViewEventController.reportReceiptDue(ern: String, arc: String, eventId: Int)
GET        /trader/:ern/movement/:arc/event/:eventId/movement-destination-due                controllers.events.ViewEventController.movementDestinationDue(ern: String, arc: String, eventId: Int)
GET        /trader/:ern/movement/:arc/event/:eventId/movement-diverted                       controllers.events.ViewEventController.movementDiverted(ern: String, arc: String, eventId: Int)
GET        /trader/:ern/movement/:arc/event/:eventId/movement-split                          controllers.events.ViewEventController.movementSplit(ern: String, arc: String, eventId: Int)
#GET        /trader/:ern/movement/:arc/event/:eventId/movement-intercepted                    controllers.events.ViewEventController.movementIntercepted(ern: String, arc: String, eventId: Int)
#GET        /trader/:ern/movement/:arc/event/:eventId/movement-cancelled                      controllers.events.ViewEventController.movementCancelled(ern: String, arc: String, eventId: Int)
#GET        /trader/:ern/movement/:arc/event/:eventId/change-destination-submitted            controllers.events.ViewEventController.changeDestinationSubmitted(ern: String, arc: String, eventId: Int)
GET        /trader/:ern/movement/:arc/event/:eventId/report-receipt-submitted                controllers.events.ViewEventController.reportReceiptSubmitted(ern: String, arc: String, eventId: Int)
#GET        /trader/:ern/movement/:arc/event/:eventId/alert-rejection-submitted               controllers.events.ViewEventController.alertRejectionSubmitted(ern: String, arc: String, eventId: Int)
#GET        /trader/:ern/movement/:arc/event/:eventId/movement-accepted-customs               controllers.events.ViewEventController.movementAcceptedCustoms(ern: String, arc: String, eventId: Int)
#GET        /trader/:ern/movement/:arc/event/:eventId/explantion-delay-submitted              controllers.events.ViewEventController.explanationDelaySubmitted(ern: String, arc: String, eventId: Int)
#GET        /trader/:ern/movement/:arc/event/:eventId/movement-rejected-customs               controllers.events.ViewEventController.movementRejectedCustoms(ern: String, arc: String, eventId: Int)
#GET        /trader/:ern/movement/:arc/event/:eventId/event-report-received                   controllers.events.ViewEventController.eventReportReceived(ern: String, arc: String, eventId: Int)
#GET        /trader/:ern/movement/:arc/event/:eventId/movement-closed                         controllers.events.ViewEventController.movementClosed(ern: String, arc: String, eventId: Int)
#GET        /trader/:ern/movement/:arc/event/:eventId/explanation-shortage-excess-submitted   controllers.events.ViewEventController.shortageExcessSubmitted(ern: String, arc: String, eventId: Int)
#GET        /trader/:ern/movement/:arc/event/:eventId/movement-closure-response               controllers.events.ViewEventController.movementClosureResponse(ern: String, arc: String, eventId: Int)
#GET        /trader/:ern/movement/:arc/event/:eventId/movement-manually-closed                controllers.events.ViewEventController.movementManuallyClosed(ern: String, arc: String, eventId: Int)